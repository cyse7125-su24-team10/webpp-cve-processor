package main

import (
	"fmt"
	"strings"

	"github.com/cyse7125-su24-team10/webpp-cve-processor/config"
	"github.com/cyse7125-su24-team10/webpp-cve-processor/services/cveprocessor"
)

func main() {
	// postgresConn, err := db.GetPostgresConn()
	// if err != nil {
	// 	panic(err)
	// } else {
	// 	fmt.Println("connected to postgres")
	// }
	// fmt.Println(postgresConn)

	// url := config.Envs.URL
	// destDir := "./"

	cveprocessor.DownloadAndUnzip()
	kafkaProducer := cveprocessor.NewKafkaProducer()
	brokers := []string{
		config.Envs.KafkaBroker0,
		config.Envs.KafkaBroker1,
		config.Envs.KafkaBroker2,
	}
	kafkaWriter, err := kafkaProducer.KafkaWriter(brokers)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
	}

	fmt.Println("kafkaWriter", kafkaWriter)

	if strings.Contains(config.Envs.URL, "delta") {
		loadCVE := cveprocessor.NewLoadCVE()
		msg, err := loadCVE.LoadDeltaData(kafkaWriter)
		fmt.Println(msg)
		if err != nil {
			panic(err)
		}
	} else {
		loadCVE := cveprocessor.NewLoadCVE()
		msg, err := loadCVE.LoadJsonData(kafkaWriter)
		if err != nil {
			panic(err)
		}
		fmt.Println(msg)
	}

}
