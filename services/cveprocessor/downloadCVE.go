package cveprocessor

import (
	"archive/zip"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/cyse7125-su24-team10/webpp-cve-processor/config"
)

func DownloadFile(url, filepath string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

// Unzip extracts a ZIP archive to a specified directory
func Unzip(src, dest string) error {
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()

	for _, f := range r.File {
		fpath := filepath.Join(dest, f.Name)
		if !strings.HasPrefix(fpath, filepath.Clean(dest)+string(os.PathSeparator)) {
			return fmt.Errorf("invalid file path: %s", fpath)
		}

		if f.FileInfo().IsDir() {
			os.MkdirAll(fpath, os.ModePerm)
			continue
		}

		if err := os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
			return err
		}

		outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			return err
		}

		rc, err := f.Open()
		if err != nil {
			return err
		}

		_, err = io.Copy(outFile, rc)

		outFile.Close()
		rc.Close()

		if err != nil {
			return err
		}
	}
	return nil
}

func DownloadAndUnzip() {
	zipURL := config.Envs.URL
	localZipPath := "/tmp/cvelistV5-main.zip"
	extractDir := "tmp/"

	fmt.Println("Downloading zip file...")
	if err := DownloadFile(zipURL, localZipPath); err != nil {
		fmt.Printf("Failed to download zip file: %v\n", err)
		return
	}

	fmt.Println("Extracting zip file...")
	if err := Unzip(localZipPath, extractDir); err != nil {
		fmt.Printf("Failed to extract zip file: %v\n", err)
		return
	}

	fmt.Println("Done!")
}
