package cveprocessor

import (
	"archive/zip"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
)

func DownloadAndUnzip(url, destDir string) (string, error) {
	// Create the destination directory if it doesn't exist
	if err := os.MkdirAll(destDir, 0755); err != nil {
		return "", fmt.Errorf("failed to create directory: %v", err)
	}

	// Download the file
	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("failed to download file: %v", err)
	}
	defer resp.Body.Close()

	// Create a temporary file to store the downloaded content
	tempFile, err := os.CreateTemp(destDir, "temp-*.zip")
	if err != nil {
		return "", fmt.Errorf("failed to create temp file: %v", err)
	}
	defer os.Remove(tempFile.Name()) // Clean up the temp file

	// Copy the response body to the temp file
	_, err = io.Copy(tempFile, resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to write to temp file: %v", err)
	}
	tempFile.Close()

	// Open the zip archive
	zipReader, err := zip.OpenReader(tempFile.Name())
	if err != nil {
		return "", fmt.Errorf("failed to open zip file: %v", err)
	}
	defer zipReader.Close()

	// Extract files
	for _, file := range zipReader.File {
		filePath := filepath.Join(destDir, file.Name)

		if file.FileInfo().IsDir() {
			os.MkdirAll(filePath, file.Mode())
			continue
		}

		// Create the file
		outFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, file.Mode())
		if err != nil {
			return "", fmt.Errorf("failed to create file %s: %v", filePath, err)
		}

		// Open the zipped file
		zippedFile, err := file.Open()
		if err != nil {
			outFile.Close()
			return "", fmt.Errorf("failed to open zipped file: %v", err)
		}

		// Copy the content
		_, err = io.Copy(outFile, zippedFile)
		outFile.Close()
		zippedFile.Close()
		if err != nil {
			return "", fmt.Errorf("failed to write file %s: %v", filePath, err)
		}
	}

	// Return the path of the first file in the zip (assuming it's the main file)
	if len(zipReader.File) > 0 {
		return filepath.Join(destDir, zipReader.File[0].Name), nil
	}
	return "", fmt.Errorf("zip file is empty")
}
