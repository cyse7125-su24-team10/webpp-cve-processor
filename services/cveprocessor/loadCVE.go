package cveprocessor

import (
	"database/sql"
	"fmt"
	"log"
	"os"

	"github.com/google/uuid"
)

type LoadCVE struct {
	db *sql.DB
}

func NewLoadCVE(db *sql.DB) *LoadCVE {
	return &LoadCVE{
		db: db,
	}
}

func (l *LoadCVE) LoadJsonData() (string, error) {
	cnt := 0

	entries, err := os.ReadDir("./cvelistV5-main")
	if err != nil {
		log.Fatal(err)
	}

	for _, e := range entries {
		dir, err := os.ReadDir("./cvelistV5-main/" + e.Name())
		if err != nil {
			log.Fatal(err)
		}
		for _, d := range dir {
			year, err := os.ReadDir("./cvelistV5-main/" + e.Name() + "/" + d.Name())
			if err != nil {
				log.Fatal(err)
			}
			for _, o := range year {
				folder, err := os.ReadDir("./cvelistV5-main/" + e.Name() + "/" + d.Name() + "/" + o.Name())
				if err != nil {
					log.Fatal(err)
				}
				filePath := fmt.Sprintf("./cvelistV5-main/" + e.Name() + "/" + d.Name() + "/" + o.Name())
				for _, f := range folder {
					l.InsertDB(f, filePath)
					cnt++
					//fmt.Println(f, filePath)
				}

			}
		}
	}

	fmt.Println(cnt)
	return "cnt", nil
}

func (l *LoadCVE) InsertDB(file os.DirEntry, filePath string) (string, error) {
	jsonFilePath := fmt.Sprintf("%s/%s", filePath, file.Name())
	jsonData, err := os.ReadFile(jsonFilePath)
	if err != nil {
		log.Fatal(err)
	}
	id := uuid.New()
	fmt.Println(id)
	query := "INSERT INTO CVE (id, cve_information) VALUES ($1, $2::jsonb);"

	// Execute the SQL query
	_, err = l.db.Exec(query, id, string(jsonData))
	if err != nil {
		return "", fmt.Errorf("failed to insert data: %v", err)
	}

	return "Data inserted successfully", nil
	fmt.Println(jsonFilePath)
	return "", nil
	//_, err := l.db.Exec("INSERT INTO CVE (id, cve_information) \nVALUES \n  (\n    1, '{\"title\": \"My first day at work\", \"Feeling\": \"Mixed feeling\"}'\n  );")
}
