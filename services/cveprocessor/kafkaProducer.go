package cveprocessor

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/cyse7125-su24-team10/webpp-cve-processor/config"
	"github.com/segmentio/kafka-go"
	"github.com/segmentio/kafka-go/sasl/scram"
)

type kafkaProducer struct {
}

func NewKafkaProducer() *kafkaProducer {
	return &kafkaProducer{}
}

func (k *kafkaProducer) KafkaWriter(brokers []string) (w *kafka.Writer, err error) {
	mechanism, err := scram.Mechanism(scram.SHA256, config.Envs.KafkaUser, config.Envs.KafkaPassword)
	if err != nil {
		log.Fatal(err)
	}

	dialer := &kafka.Dialer{
		Timeout:       10 * time.Second,
		DualStack:     true,
		SASLMechanism: mechanism,
	}

	conn, err := dialer.Dial("tcp", "kafka-controller-0.kafka-controller-headless.kafka.svc.cluster.local:9092")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("connected to kafka", conn.RemoteAddr())

	newTopic := conn.CreateTopics(kafka.TopicConfig{
		Topic:             "cve",
		NumPartitions:     1,
		ReplicationFactor: 1,
	})

	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("topic created", newTopic)
	writer := kafka.NewWriter(kafka.WriterConfig{
		Brokers:      brokers,
		Topic:        "cve",
		Dialer:       dialer,
		BatchTimeout: 1 * time.Millisecond,
		BatchSize:    100,
		BatchBytes:   20971520,
	})
	w = writer
	return writer, nil

}

func (k *kafkaProducer) PushMessage(writer *kafka.Writer, key string, val string) (string, error) {
	err := writer.WriteMessages(context.Background(), kafka.Message{
		Key:   []byte(key),
		Value: []byte(val),
	})
	if err != nil {
		log.Fatal(err)
	}
	return key, err
}
